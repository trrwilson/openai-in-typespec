// <auto-generated/>

using System;
using System.ComponentModel;

namespace OpenAI.Internal.Models
{
    /// <summary> The ThreadObject_object. </summary>
    internal readonly partial struct ThreadObjectObject : IEquatable<ThreadObjectObject>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ThreadObjectObject"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ThreadObjectObject(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ThreadValue = "thread";

        /// <summary> thread. </summary>
        public static ThreadObjectObject Thread { get; } = new ThreadObjectObject(ThreadValue);
        /// <summary> Determines if two <see cref="ThreadObjectObject"/> values are the same. </summary>
        public static bool operator ==(ThreadObjectObject left, ThreadObjectObject right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ThreadObjectObject"/> values are not the same. </summary>
        public static bool operator !=(ThreadObjectObject left, ThreadObjectObject right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ThreadObjectObject"/>. </summary>
        public static implicit operator ThreadObjectObject(string value) => new ThreadObjectObject(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ThreadObjectObject other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ThreadObjectObject other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}

