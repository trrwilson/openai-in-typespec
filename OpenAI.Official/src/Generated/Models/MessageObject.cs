// <auto-generated/>

using System;
using OpenAI.ClientShared.Internal;
using System.Collections.Generic;
using System.Linq;

namespace OpenAI.Official.Internal.Models
{
    /// <summary> The MessageObject. </summary>
    internal partial class MessageObject
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MessageObject"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="createdAt"> The Unix timestamp (in seconds) for when the message was created. </param>
        /// <param name="threadId"> The [thread](/docs/api-reference/threads) ID that this message belongs to. </param>
        /// <param name="role"> The entity that produced the message. One of `user` or `assistant`. </param>
        /// <param name="content"> The content of the message in array of text and/or images. </param>
        /// <param name="assistantId">
        /// If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this
        /// message.
        /// </param>
        /// <param name="runId">
        /// If applicable, the ID of the [run](/docs/api-reference/runs) associated with the authoring of
        /// this message.
        /// </param>
        /// <param name="fileIds">
        /// A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for
        /// tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be
        /// attached to a message.
        /// </param>
        /// <param name="metadata">
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
        /// additional information about the object in a structured format. Keys can be a maximum of 64
        /// characters long and values can be a maxium of 512 characters long.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="threadId"/>, <paramref name="content"/> or <paramref name="fileIds"/> is null. </exception>
        internal MessageObject(string id, DateTimeOffset createdAt, string threadId, MessageObjectRole role, IEnumerable<BinaryData> content, string assistantId, string runId, IEnumerable<string> fileIds, IReadOnlyDictionary<string, string> metadata)
        {
            if (id is null) throw new ArgumentNullException(nameof(id));
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (content is null) throw new ArgumentNullException(nameof(content));
            if (fileIds is null) throw new ArgumentNullException(nameof(fileIds));

            Id = id;
            CreatedAt = createdAt;
            ThreadId = threadId;
            Role = role;
            Content = content.ToList();
            AssistantId = assistantId;
            RunId = runId;
            FileIds = fileIds.ToList();
            Metadata = metadata;
        }

        /// <summary> Initializes a new instance of <see cref="MessageObject"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always `thread.message`. </param>
        /// <param name="createdAt"> The Unix timestamp (in seconds) for when the message was created. </param>
        /// <param name="threadId"> The [thread](/docs/api-reference/threads) ID that this message belongs to. </param>
        /// <param name="role"> The entity that produced the message. One of `user` or `assistant`. </param>
        /// <param name="content"> The content of the message in array of text and/or images. </param>
        /// <param name="assistantId">
        /// If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this
        /// message.
        /// </param>
        /// <param name="runId">
        /// If applicable, the ID of the [run](/docs/api-reference/runs) associated with the authoring of
        /// this message.
        /// </param>
        /// <param name="fileIds">
        /// A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for
        /// tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be
        /// attached to a message.
        /// </param>
        /// <param name="metadata">
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
        /// additional information about the object in a structured format. Keys can be a maximum of 64
        /// characters long and values can be a maxium of 512 characters long.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MessageObject(string id, MessageObjectObject @object, DateTimeOffset createdAt, string threadId, MessageObjectRole role, IReadOnlyList<BinaryData> content, string assistantId, string runId, IReadOnlyList<string> fileIds, IReadOnlyDictionary<string, string> metadata, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Object = @object;
            CreatedAt = createdAt;
            ThreadId = threadId;
            Role = role;
            Content = content;
            AssistantId = assistantId;
            RunId = runId;
            FileIds = fileIds;
            Metadata = metadata;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="MessageObject"/> for deserialization. </summary>
        internal MessageObject()
        {
        }

        /// <summary> The identifier, which can be referenced in API endpoints. </summary>
        public string Id { get; }
        /// <summary> The object type, which is always `thread.message`. </summary>
        public MessageObjectObject Object { get; } = MessageObjectObject.ThreadMessage;

        /// <summary> The Unix timestamp (in seconds) for when the message was created. </summary>
        public DateTimeOffset CreatedAt { get; }
        /// <summary> The [thread](/docs/api-reference/threads) ID that this message belongs to. </summary>
        public string ThreadId { get; }
        /// <summary> The entity that produced the message. One of `user` or `assistant`. </summary>
        public MessageObjectRole Role { get; }
        /// <summary>
        /// The content of the message in array of text and/or images.
        /// <para>
        /// To assign an object to the element of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyList<BinaryData> Content { get; }
        /// <summary>
        /// If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this
        /// message.
        /// </summary>
        public string AssistantId { get; }
        /// <summary>
        /// If applicable, the ID of the [run](/docs/api-reference/runs) associated with the authoring of
        /// this message.
        /// </summary>
        public string RunId { get; }
        /// <summary>
        /// A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for
        /// tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be
        /// attached to a message.
        /// </summary>
        public IReadOnlyList<string> FileIds { get; }
        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
        /// additional information about the object in a structured format. Keys can be a maximum of 64
        /// characters long and values can be a maxium of 512 characters long.
        /// </summary>
        public IReadOnlyDictionary<string, string> Metadata { get; }
    }
}

