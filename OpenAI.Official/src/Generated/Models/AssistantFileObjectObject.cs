// <auto-generated/>

using System;
using System.ComponentModel;

namespace OpenAI.Internal.Models
{
    /// <summary> The AssistantFileObject_object. </summary>
    internal readonly partial struct AssistantFileObjectObject : IEquatable<AssistantFileObjectObject>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AssistantFileObjectObject"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AssistantFileObjectObject(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AssistantFileValue = "assistant.file";

        /// <summary> assistant.file. </summary>
        public static AssistantFileObjectObject AssistantFile { get; } = new AssistantFileObjectObject(AssistantFileValue);
        /// <summary> Determines if two <see cref="AssistantFileObjectObject"/> values are the same. </summary>
        public static bool operator ==(AssistantFileObjectObject left, AssistantFileObjectObject right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AssistantFileObjectObject"/> values are not the same. </summary>
        public static bool operator !=(AssistantFileObjectObject left, AssistantFileObjectObject right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AssistantFileObjectObject"/>. </summary>
        public static implicit operator AssistantFileObjectObject(string value) => new AssistantFileObjectObject(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssistantFileObjectObject other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AssistantFileObjectObject other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}

