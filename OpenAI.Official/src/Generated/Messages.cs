// <auto-generated/>

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using OpenAI.Internal.Models;

namespace OpenAI.Internal
{
    // Data plane generated sub-client.
    /// <summary> The Messages sub-client. </summary>
    internal partial class Messages
    {
        private const string AuthorizationHeader = "Authorization";
        private readonly ApiKeyCredential _credential;
        private const string AuthorizationApiKeyPrefix = "Bearer";
        private readonly ClientPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual ClientPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Messages for mocking. </summary>
        protected Messages()
        {
        }

        /// <summary> Initializes a new instance of Messages. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="credential"> The key credential to copy. </param>
        /// <param name="endpoint"> OpenAI Endpoint. </param>
        internal Messages(ClientPipeline pipeline, ApiKeyCredential credential, Uri endpoint)
        {
            _pipeline = pipeline;
            _credential = credential;
            _endpoint = endpoint;
        }

        /// <summary> Create a message. </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) to create a message for. </param>
        /// <param name="message"> The <see cref="CreateMessageRequest"/> to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="message"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<ClientResult<MessageObject>> CreateMessageAsync(string threadId, CreateMessageRequest message)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            if (message is null) throw new ArgumentNullException(nameof(message));

            using BinaryContent content = BinaryContent.Create(message);
            ClientResult result = await CreateMessageAsync(threadId, content).ConfigureAwait(false);
            return ClientResult.FromValue(MessageObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Create a message. </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) to create a message for. </param>
        /// <param name="message"> The <see cref="CreateMessageRequest"/> to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="message"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult<MessageObject> CreateMessage(string threadId, CreateMessageRequest message)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            if (message is null) throw new ArgumentNullException(nameof(message));

            using BinaryContent content = BinaryContent.Create(message);
            ClientResult result = CreateMessage(threadId, content);
            return ClientResult.FromValue(MessageObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Create a message.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateMessageAsync(string,CreateMessageRequest)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) to create a message for. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> CreateMessageAsync(string threadId, BinaryContent content, RequestOptions options = null)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            if (content is null) throw new ArgumentNullException(nameof(content));
            options ??= new RequestOptions();
            using PipelineMessage message = CreateCreateMessageRequest(threadId, content, options);
            await _pipeline.SendAsync(message).ConfigureAwait(false);
            PipelineResponse response = message.Response!;

            if (response.IsError && options.ErrorOptions == ClientErrorBehaviors.Default)
            {
                throw await ClientResultException.CreateAsync(response).ConfigureAwait(false);
            }

            return ClientResult.FromResponse(response);
        }

        /// <summary>
        /// [Protocol Method] Create a message.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateMessage(string,CreateMessageRequest)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) to create a message for. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult CreateMessage(string threadId, BinaryContent content, RequestOptions options = null)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            if (content is null) throw new ArgumentNullException(nameof(content));
            options ??= new RequestOptions();
            using PipelineMessage message = CreateCreateMessageRequest(threadId, content, options);
            _pipeline.Send(message);
            PipelineResponse response = message.Response!;

            if (response.IsError && options.ErrorOptions == ClientErrorBehaviors.Default)
            {
                throw new ClientResultException(response);
            }

            return ClientResult.FromResponse(response);
        }

        /// <summary> Returns a list of messages for a given thread. </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) the messages belong to. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<ClientResult<ListMessagesResponse>> GetMessagesAsync(string threadId, int? limit = null, ListOrder? order = null, string after = null, string before = null)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));

            ClientResult result = await GetMessagesAsync(threadId, limit, order?.ToString(), after, before, default).ConfigureAwait(false);
            return ClientResult.FromValue(ListMessagesResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Returns a list of messages for a given thread. </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) the messages belong to. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult<ListMessagesResponse> GetMessages(string threadId, int? limit = null, ListOrder? order = null, string after = null, string before = null)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));

            ClientResult result = GetMessages(threadId, limit, order?.ToString(), after, before, default);
            return ClientResult.FromValue(ListMessagesResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Returns a list of messages for a given thread.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMessagesAsync(string,int?,ListOrder?,string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) the messages belong to. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order. Allowed values: "asc" | "desc"
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetMessagesAsync(string threadId, int? limit, string order, string after, string before, RequestOptions options)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            options ??= new RequestOptions();
            using PipelineMessage message = CreateGetMessagesRequest(threadId, limit, order, after, before, options);
            await _pipeline.SendAsync(message).ConfigureAwait(false);
            PipelineResponse response = message.Response!;

            if (response.IsError && options.ErrorOptions == ClientErrorBehaviors.Default)
            {
                throw await ClientResultException.CreateAsync(response).ConfigureAwait(false);
            }

            return ClientResult.FromResponse(response);
        }

        /// <summary>
        /// [Protocol Method] Returns a list of messages for a given thread.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMessages(string,int?,ListOrder?,string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) the messages belong to. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order. Allowed values: "asc" | "desc"
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetMessages(string threadId, int? limit, string order, string after, string before, RequestOptions options)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            options ??= new RequestOptions();
            using PipelineMessage message = CreateGetMessagesRequest(threadId, limit, order, after, before, options);
            _pipeline.Send(message);
            PipelineResponse response = message.Response!;

            if (response.IsError && options.ErrorOptions == ClientErrorBehaviors.Default)
            {
                throw new ClientResultException(response);
            }

            return ClientResult.FromResponse(response);
        }

        /// <summary> Retrieve a message. </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) to which this message belongs. </param>
        /// <param name="messageId"> The ID of the message to retrieve. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="messageId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<ClientResult<MessageObject>> GetMessageAsync(string threadId, string messageId)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            if (messageId is null) throw new ArgumentNullException(nameof(messageId));
            if (string.IsNullOrEmpty(messageId)) throw new ArgumentException(nameof(messageId));

            ClientResult result = await GetMessageAsync(threadId, messageId, default).ConfigureAwait(false);
            return ClientResult.FromValue(MessageObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Retrieve a message. </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) to which this message belongs. </param>
        /// <param name="messageId"> The ID of the message to retrieve. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="messageId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult<MessageObject> GetMessage(string threadId, string messageId)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            if (messageId is null) throw new ArgumentNullException(nameof(messageId));
            if (string.IsNullOrEmpty(messageId)) throw new ArgumentException(nameof(messageId));

            ClientResult result = GetMessage(threadId, messageId, default);
            return ClientResult.FromValue(MessageObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Retrieve a message.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMessageAsync(string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) to which this message belongs. </param>
        /// <param name="messageId"> The ID of the message to retrieve. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="messageId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetMessageAsync(string threadId, string messageId, RequestOptions options)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            if (messageId is null) throw new ArgumentNullException(nameof(messageId));
            if (string.IsNullOrEmpty(messageId)) throw new ArgumentException(nameof(messageId));
            options ??= new RequestOptions();
            using PipelineMessage message = CreateGetMessageRequest(threadId, messageId, options);
            await _pipeline.SendAsync(message).ConfigureAwait(false);
            PipelineResponse response = message.Response!;

            if (response.IsError && options.ErrorOptions == ClientErrorBehaviors.Default)
            {
                throw await ClientResultException.CreateAsync(response).ConfigureAwait(false);
            }

            return ClientResult.FromResponse(response);
        }

        /// <summary>
        /// [Protocol Method] Retrieve a message.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMessage(string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) to which this message belongs. </param>
        /// <param name="messageId"> The ID of the message to retrieve. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="messageId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetMessage(string threadId, string messageId, RequestOptions options)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            if (messageId is null) throw new ArgumentNullException(nameof(messageId));
            if (string.IsNullOrEmpty(messageId)) throw new ArgumentException(nameof(messageId));
            options ??= new RequestOptions();
            using PipelineMessage message = CreateGetMessageRequest(threadId, messageId, options);
            _pipeline.Send(message);
            PipelineResponse response = message.Response!;

            if (response.IsError && options.ErrorOptions == ClientErrorBehaviors.Default)
            {
                throw new ClientResultException(response);
            }

            return ClientResult.FromResponse(response);
        }

        /// <summary> Modifies a message. </summary>
        /// <param name="threadId"> The ID of the thread to which this message belongs. </param>
        /// <param name="messageId"> The ID of the message to modify. </param>
        /// <param name="message"> The <see cref="ModifyMessageRequest"/> to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="message"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<ClientResult<MessageObject>> ModifyMessageAsync(string threadId, string messageId, ModifyMessageRequest message)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            if (messageId is null) throw new ArgumentNullException(nameof(messageId));
            if (string.IsNullOrEmpty(messageId)) throw new ArgumentException(nameof(messageId));
            if (message is null) throw new ArgumentNullException(nameof(message));

            using BinaryContent content = BinaryContent.Create(message);
            ClientResult result = await ModifyMessageAsync(threadId, messageId, content).ConfigureAwait(false);
            return ClientResult.FromValue(MessageObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Modifies a message. </summary>
        /// <param name="threadId"> The ID of the thread to which this message belongs. </param>
        /// <param name="messageId"> The ID of the message to modify. </param>
        /// <param name="message"> The <see cref="ModifyMessageRequest"/> to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="message"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult<MessageObject> ModifyMessage(string threadId, string messageId, ModifyMessageRequest message)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            if (messageId is null) throw new ArgumentNullException(nameof(messageId));
            if (string.IsNullOrEmpty(messageId)) throw new ArgumentException(nameof(messageId));
            if (message is null) throw new ArgumentNullException(nameof(message));

            using BinaryContent content = BinaryContent.Create(message);
            ClientResult result = ModifyMessage(threadId, messageId, content);
            return ClientResult.FromValue(MessageObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Modifies a message.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="ModifyMessageAsync(string,string,ModifyMessageRequest)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the thread to which this message belongs. </param>
        /// <param name="messageId"> The ID of the message to modify. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> ModifyMessageAsync(string threadId, string messageId, BinaryContent content, RequestOptions options = null)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            if (messageId is null) throw new ArgumentNullException(nameof(messageId));
            if (string.IsNullOrEmpty(messageId)) throw new ArgumentException(nameof(messageId));
            if (content is null) throw new ArgumentNullException(nameof(content));
            options ??= new RequestOptions();
            using PipelineMessage message = CreateModifyMessageRequest(threadId, messageId, content, options);
            await _pipeline.SendAsync(message).ConfigureAwait(false);
            PipelineResponse response = message.Response!;

            if (response.IsError && options.ErrorOptions == ClientErrorBehaviors.Default)
            {
                throw await ClientResultException.CreateAsync(response).ConfigureAwait(false);
            }

            return ClientResult.FromResponse(response);
        }

        /// <summary>
        /// [Protocol Method] Modifies a message.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="ModifyMessage(string,string,ModifyMessageRequest)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the thread to which this message belongs. </param>
        /// <param name="messageId"> The ID of the message to modify. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult ModifyMessage(string threadId, string messageId, BinaryContent content, RequestOptions options = null)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            if (messageId is null) throw new ArgumentNullException(nameof(messageId));
            if (string.IsNullOrEmpty(messageId)) throw new ArgumentException(nameof(messageId));
            if (content is null) throw new ArgumentNullException(nameof(content));
            options ??= new RequestOptions();
            using PipelineMessage message = CreateModifyMessageRequest(threadId, messageId, content, options);
            _pipeline.Send(message);
            PipelineResponse response = message.Response!;

            if (response.IsError && options.ErrorOptions == ClientErrorBehaviors.Default)
            {
                throw new ClientResultException(response);
            }

            return ClientResult.FromResponse(response);
        }

        /// <summary> Returns a list of message files. </summary>
        /// <param name="threadId"> The ID of the thread that the message and files belong to. </param>
        /// <param name="messageId"> The ID of the message that the files belongs to. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="messageId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<ClientResult<ListMessageFilesResponse>> GetMessageFilesAsync(string threadId, string messageId, int? limit = null, ListOrder? order = null, string after = null, string before = null)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            if (messageId is null) throw new ArgumentNullException(nameof(messageId));
            if (string.IsNullOrEmpty(messageId)) throw new ArgumentException(nameof(messageId));

            ClientResult result = await GetMessageFilesAsync(threadId, messageId, limit, order?.ToString(), after, before, default).ConfigureAwait(false);
            return ClientResult.FromValue(ListMessageFilesResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Returns a list of message files. </summary>
        /// <param name="threadId"> The ID of the thread that the message and files belong to. </param>
        /// <param name="messageId"> The ID of the message that the files belongs to. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="messageId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult<ListMessageFilesResponse> GetMessageFiles(string threadId, string messageId, int? limit = null, ListOrder? order = null, string after = null, string before = null)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            if (messageId is null) throw new ArgumentNullException(nameof(messageId));
            if (string.IsNullOrEmpty(messageId)) throw new ArgumentException(nameof(messageId));

            ClientResult result = GetMessageFiles(threadId, messageId, limit, order?.ToString(), after, before, default);
            return ClientResult.FromValue(ListMessageFilesResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Returns a list of message files.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMessageFilesAsync(string,string,int?,ListOrder?,string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the thread that the message and files belong to. </param>
        /// <param name="messageId"> The ID of the message that the files belongs to. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order. Allowed values: "asc" | "desc"
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="messageId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetMessageFilesAsync(string threadId, string messageId, int? limit, string order, string after, string before, RequestOptions options)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            if (messageId is null) throw new ArgumentNullException(nameof(messageId));
            if (string.IsNullOrEmpty(messageId)) throw new ArgumentException(nameof(messageId));
            options ??= new RequestOptions();
            using PipelineMessage message = CreateGetMessageFilesRequest(threadId, messageId, limit, order, after, before, options);
            await _pipeline.SendAsync(message).ConfigureAwait(false);
            PipelineResponse response = message.Response!;

            if (response.IsError && options.ErrorOptions == ClientErrorBehaviors.Default)
            {
                throw await ClientResultException.CreateAsync(response).ConfigureAwait(false);
            }

            return ClientResult.FromResponse(response);
        }

        /// <summary>
        /// [Protocol Method] Returns a list of message files.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMessageFiles(string,string,int?,ListOrder?,string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the thread that the message and files belong to. </param>
        /// <param name="messageId"> The ID of the message that the files belongs to. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order. Allowed values: "asc" | "desc"
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="messageId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetMessageFiles(string threadId, string messageId, int? limit, string order, string after, string before, RequestOptions options)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            if (messageId is null) throw new ArgumentNullException(nameof(messageId));
            if (string.IsNullOrEmpty(messageId)) throw new ArgumentException(nameof(messageId));
            options ??= new RequestOptions();
            using PipelineMessage message = CreateGetMessageFilesRequest(threadId, messageId, limit, order, after, before, options);
            _pipeline.Send(message);
            PipelineResponse response = message.Response!;

            if (response.IsError && options.ErrorOptions == ClientErrorBehaviors.Default)
            {
                throw new ClientResultException(response);
            }

            return ClientResult.FromResponse(response);
        }

        /// <summary> Retrieves a message file. </summary>
        /// <param name="threadId"> The ID of the thread to which the message and File belong. </param>
        /// <param name="messageId"> The ID of the message the file belongs to. </param>
        /// <param name="fileId"> The ID of the file being retrieved. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="fileId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="fileId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<ClientResult<MessageFileObject>> GetMessageFileAsync(string threadId, string messageId, string fileId)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            if (messageId is null) throw new ArgumentNullException(nameof(messageId));
            if (string.IsNullOrEmpty(messageId)) throw new ArgumentException(nameof(messageId));
            if (fileId is null) throw new ArgumentNullException(nameof(fileId));
            if (string.IsNullOrEmpty(fileId)) throw new ArgumentException(nameof(fileId));

            ClientResult result = await GetMessageFileAsync(threadId, messageId, fileId, default).ConfigureAwait(false);
            return ClientResult.FromValue(MessageFileObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Retrieves a message file. </summary>
        /// <param name="threadId"> The ID of the thread to which the message and File belong. </param>
        /// <param name="messageId"> The ID of the message the file belongs to. </param>
        /// <param name="fileId"> The ID of the file being retrieved. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="fileId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="fileId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult<MessageFileObject> GetMessageFile(string threadId, string messageId, string fileId)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            if (messageId is null) throw new ArgumentNullException(nameof(messageId));
            if (string.IsNullOrEmpty(messageId)) throw new ArgumentException(nameof(messageId));
            if (fileId is null) throw new ArgumentNullException(nameof(fileId));
            if (string.IsNullOrEmpty(fileId)) throw new ArgumentException(nameof(fileId));

            ClientResult result = GetMessageFile(threadId, messageId, fileId, default);
            return ClientResult.FromValue(MessageFileObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Retrieves a message file.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMessageFileAsync(string,string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the thread to which the message and File belong. </param>
        /// <param name="messageId"> The ID of the message the file belongs to. </param>
        /// <param name="fileId"> The ID of the file being retrieved. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="fileId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="fileId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetMessageFileAsync(string threadId, string messageId, string fileId, RequestOptions options)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            if (messageId is null) throw new ArgumentNullException(nameof(messageId));
            if (string.IsNullOrEmpty(messageId)) throw new ArgumentException(nameof(messageId));
            if (fileId is null) throw new ArgumentNullException(nameof(fileId));
            if (string.IsNullOrEmpty(fileId)) throw new ArgumentException(nameof(fileId));
            options ??= new RequestOptions();
            using PipelineMessage message = CreateGetMessageFileRequest(threadId, messageId, fileId, options);
            await _pipeline.SendAsync(message).ConfigureAwait(false);
            PipelineResponse response = message.Response!;

            if (response.IsError && options.ErrorOptions == ClientErrorBehaviors.Default)
            {
                throw await ClientResultException.CreateAsync(response).ConfigureAwait(false);
            }

            return ClientResult.FromResponse(response);
        }

        /// <summary>
        /// [Protocol Method] Retrieves a message file.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMessageFile(string,string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the thread to which the message and File belong. </param>
        /// <param name="messageId"> The ID of the message the file belongs to. </param>
        /// <param name="fileId"> The ID of the file being retrieved. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="fileId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="fileId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetMessageFile(string threadId, string messageId, string fileId, RequestOptions options)
        {
            if (threadId is null) throw new ArgumentNullException(nameof(threadId));
            if (string.IsNullOrEmpty(threadId)) throw new ArgumentException(nameof(threadId));
            if (messageId is null) throw new ArgumentNullException(nameof(messageId));
            if (string.IsNullOrEmpty(messageId)) throw new ArgumentException(nameof(messageId));
            if (fileId is null) throw new ArgumentNullException(nameof(fileId));
            if (string.IsNullOrEmpty(fileId)) throw new ArgumentException(nameof(fileId));
            options ??= new RequestOptions();
            using PipelineMessage message = CreateGetMessageFileRequest(threadId, messageId, fileId, options);
            _pipeline.Send(message);
            PipelineResponse response = message.Response!;

            if (response.IsError && options.ErrorOptions == ClientErrorBehaviors.Default)
            {
                throw new ClientResultException(response);
            }

            return ClientResult.FromResponse(response);
        }

        internal PipelineMessage CreateCreateMessageRequest(string threadId, BinaryContent content, RequestOptions options)
        {
            PipelineMessage message = _pipeline.CreateMessage();
            message.ResponseClassifier = ResponseErrorClassifier200;
            PipelineRequest request = message.Request;
            request.Method = "POST";
            UriBuilder uriBuilder = new(_endpoint.ToString());
            StringBuilder path = new();
            path.Append("/threads/");
            path.Append(threadId);
            path.Append("/messages");
            uriBuilder.Path += path.ToString();
            request.Uri = uriBuilder.Uri;
            request.Headers.Set("Accept", "application/json");
            request.Headers.Set("Content-Type", "application/json");
            request.Content = content;
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateGetMessagesRequest(string threadId, int? limit, string order, string after, string before, RequestOptions options)
        {
            PipelineMessage message = _pipeline.CreateMessage();
            message.ResponseClassifier = ResponseErrorClassifier200;
            PipelineRequest request = message.Request;
            request.Method = "GET";
            UriBuilder uriBuilder = new(_endpoint.ToString());
            StringBuilder path = new();
            path.Append("/threads/");
            path.Append(threadId);
            path.Append("/messages");
            uriBuilder.Path += path.ToString();
            if (limit != null)
            {
                if (uriBuilder.Query != null && uriBuilder.Query.Length > 1)
                {
                    uriBuilder.Query += $"&limit={limit.Value}";
                }
                else
                {
                    uriBuilder.Query = $"limit={limit.Value}";
                }
            }
            if (order != null)
            {
                if (uriBuilder.Query != null && uriBuilder.Query.Length > 1)
                {
                    uriBuilder.Query += $"&order={order}";
                }
                else
                {
                    uriBuilder.Query = $"order={order}";
                }
            }
            if (after != null)
            {
                if (uriBuilder.Query != null && uriBuilder.Query.Length > 1)
                {
                    uriBuilder.Query += $"&after={after}";
                }
                else
                {
                    uriBuilder.Query = $"after={after}";
                }
            }
            if (before != null)
            {
                if (uriBuilder.Query != null && uriBuilder.Query.Length > 1)
                {
                    uriBuilder.Query += $"&before={before}";
                }
                else
                {
                    uriBuilder.Query = $"before={before}";
                }
            }
            request.Uri = uriBuilder.Uri;
            request.Headers.Set("Accept", "application/json");
            return message;
        }

        internal PipelineMessage CreateGetMessageRequest(string threadId, string messageId, RequestOptions options)
        {
            PipelineMessage message = _pipeline.CreateMessage();
            message.ResponseClassifier = ResponseErrorClassifier200;
            PipelineRequest request = message.Request;
            request.Method = "GET";
            UriBuilder uriBuilder = new(_endpoint.ToString());
            StringBuilder path = new();
            path.Append("/threads/");
            path.Append(threadId);
            path.Append("/messages/");
            path.Append(messageId);
            uriBuilder.Path += path.ToString();
            request.Uri = uriBuilder.Uri;
            request.Headers.Set("Accept", "application/json");
            return message;
        }

        internal PipelineMessage CreateModifyMessageRequest(string threadId, string messageId, BinaryContent content, RequestOptions options)
        {
            PipelineMessage message = _pipeline.CreateMessage();
            message.ResponseClassifier = ResponseErrorClassifier200;
            PipelineRequest request = message.Request;
            request.Method = "POST";
            UriBuilder uriBuilder = new(_endpoint.ToString());
            StringBuilder path = new();
            path.Append("/threads/");
            path.Append(threadId);
            path.Append("/messages/");
            path.Append(messageId);
            uriBuilder.Path += path.ToString();
            request.Uri = uriBuilder.Uri;
            request.Headers.Set("Accept", "application/json");
            request.Headers.Set("Content-Type", "application/json");
            request.Content = content;
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateGetMessageFilesRequest(string threadId, string messageId, int? limit, string order, string after, string before, RequestOptions options)
        {
            PipelineMessage message = _pipeline.CreateMessage();
            message.ResponseClassifier = ResponseErrorClassifier200;
            PipelineRequest request = message.Request;
            request.Method = "GET";
            UriBuilder uriBuilder = new(_endpoint.ToString());
            StringBuilder path = new();
            path.Append("/threads/");
            path.Append(threadId);
            path.Append("/messages/");
            path.Append(messageId);
            path.Append("/files");
            uriBuilder.Path += path.ToString();
            if (limit != null)
            {
                if (uriBuilder.Query != null && uriBuilder.Query.Length > 1)
                {
                    uriBuilder.Query += $"&limit={limit.Value}";
                }
                else
                {
                    uriBuilder.Query = $"limit={limit.Value}";
                }
            }
            if (order != null)
            {
                if (uriBuilder.Query != null && uriBuilder.Query.Length > 1)
                {
                    uriBuilder.Query += $"&order={order}";
                }
                else
                {
                    uriBuilder.Query = $"order={order}";
                }
            }
            if (after != null)
            {
                if (uriBuilder.Query != null && uriBuilder.Query.Length > 1)
                {
                    uriBuilder.Query += $"&after={after}";
                }
                else
                {
                    uriBuilder.Query = $"after={after}";
                }
            }
            if (before != null)
            {
                if (uriBuilder.Query != null && uriBuilder.Query.Length > 1)
                {
                    uriBuilder.Query += $"&before={before}";
                }
                else
                {
                    uriBuilder.Query = $"before={before}";
                }
            }
            request.Uri = uriBuilder.Uri;
            request.Headers.Set("Accept", "application/json");
            return message;
        }

        internal PipelineMessage CreateGetMessageFileRequest(string threadId, string messageId, string fileId, RequestOptions options)
        {
            PipelineMessage message = _pipeline.CreateMessage();
            message.ResponseClassifier = ResponseErrorClassifier200;
            PipelineRequest request = message.Request;
            request.Method = "GET";
            UriBuilder uriBuilder = new(_endpoint.ToString());
            StringBuilder path = new();
            path.Append("/threads/");
            path.Append(threadId);
            path.Append("/messages/");
            path.Append(messageId);
            path.Append("/files/");
            path.Append(fileId);
            uriBuilder.Path += path.ToString();
            request.Uri = uriBuilder.Uri;
            request.Headers.Set("Accept", "application/json");
            return message;
        }

        private static PipelineMessageClassifier _responseErrorClassifier200;
        private static PipelineMessageClassifier ResponseErrorClassifier200 => _responseErrorClassifier200 ??= PipelineMessageClassifier.Create(stackalloc ushort[] { 200 });
    }
}

