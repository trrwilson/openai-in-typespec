// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Internal;
using System.ClientModel.Primitives;
using System.ClientModel.Primitives.Pipeline;
using System.Threading;
using System.Threading.Tasks;

namespace OpenAI.Official.Internal
{
    // Data plane generated sub-client.
    /// <summary> The Messages sub-client. </summary>
    internal partial class Messages
    {
        private const string AuthorizationHeader = "Authorization";
        private readonly KeyCredential _keyCredential;
        private const string AuthorizationApiKeyPrefix = "Bearer";
        private readonly MessagePipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal TelemetrySource ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual MessagePipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Messages for mocking. </summary>
        protected Messages()
        {
        }

        /// <summary> Initializes a new instance of Messages. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="keyCredential"> The key credential to copy. </param>
        /// <param name="endpoint"> OpenAI Endpoint. </param>
        internal Messages(TelemetrySource clientDiagnostics, MessagePipeline pipeline, KeyCredential keyCredential, Uri endpoint)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _keyCredential = keyCredential;
            _endpoint = endpoint;
        }

        /// <summary> Create a message. </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) to create a message for. </param>
        /// <param name="message"> The <see cref="CreateMessageRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="message"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Result<MessageObject>> CreateMessageAsync(string threadId, CreateMessageRequest message, CancellationToken cancellationToken = default)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));
            ClientUtilities.AssertNotNull(message, nameof(message));

            RequestOptions context = FromCancellationToken(cancellationToken);
            using RequestBody content = message.ToRequestBody();
            Result result = await CreateMessageAsync(threadId, content, context).ConfigureAwait(false);
            return Result.FromValue(MessageObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Create a message. </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) to create a message for. </param>
        /// <param name="message"> The <see cref="CreateMessageRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="message"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Result<MessageObject> CreateMessage(string threadId, CreateMessageRequest message, CancellationToken cancellationToken = default)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));
            ClientUtilities.AssertNotNull(message, nameof(message));

            RequestOptions context = FromCancellationToken(cancellationToken);
            using RequestBody content = message.ToRequestBody();
            Result result = CreateMessage(threadId, content, context);
            return Result.FromValue(MessageObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Create a message.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateMessageAsync(string,CreateMessageRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) to create a message for. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Result> CreateMessageAsync(string threadId, RequestBody content, RequestOptions context = null)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));
            ClientUtilities.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateSpan("Messages.CreateMessage");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateCreateMessageRequest(threadId, content, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create a message.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateMessage(string,CreateMessageRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) to create a message for. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Result CreateMessage(string threadId, RequestBody content, RequestOptions context = null)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));
            ClientUtilities.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateSpan("Messages.CreateMessage");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateCreateMessageRequest(threadId, content, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of messages for a given thread. </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) the messages belong to. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Result<ListMessagesResponse>> GetMessagesAsync(string threadId, int? limit = null, ListOrder? order = null, string after = null, string before = null, CancellationToken cancellationToken = default)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = await GetMessagesAsync(threadId, limit, order?.ToString(), after, before, context).ConfigureAwait(false);
            return Result.FromValue(ListMessagesResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Returns a list of messages for a given thread. </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) the messages belong to. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Result<ListMessagesResponse> GetMessages(string threadId, int? limit = null, ListOrder? order = null, string after = null, string before = null, CancellationToken cancellationToken = default)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = GetMessages(threadId, limit, order?.ToString(), after, before, context);
            return Result.FromValue(ListMessagesResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Returns a list of messages for a given thread.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMessagesAsync(string,int?,ListOrder?,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) the messages belong to. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order. Allowed values: "asc" | "desc"
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Result> GetMessagesAsync(string threadId, int? limit, string order, string after, string before, RequestOptions context)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));

            using var scope = ClientDiagnostics.CreateSpan("Messages.GetMessages");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetMessagesRequest(threadId, limit, order, after, before, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Returns a list of messages for a given thread.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMessages(string,int?,ListOrder?,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) the messages belong to. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order. Allowed values: "asc" | "desc"
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Result GetMessages(string threadId, int? limit, string order, string after, string before, RequestOptions context)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));

            using var scope = ClientDiagnostics.CreateSpan("Messages.GetMessages");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetMessagesRequest(threadId, limit, order, after, before, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieve a message. </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) to which this message belongs. </param>
        /// <param name="messageId"> The ID of the message to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="messageId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Result<MessageObject>> GetMessageAsync(string threadId, string messageId, CancellationToken cancellationToken = default)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));
            ClientUtilities.AssertNotNullOrEmpty(messageId, nameof(messageId));

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = await GetMessageAsync(threadId, messageId, context).ConfigureAwait(false);
            return Result.FromValue(MessageObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Retrieve a message. </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) to which this message belongs. </param>
        /// <param name="messageId"> The ID of the message to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="messageId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Result<MessageObject> GetMessage(string threadId, string messageId, CancellationToken cancellationToken = default)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));
            ClientUtilities.AssertNotNullOrEmpty(messageId, nameof(messageId));

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = GetMessage(threadId, messageId, context);
            return Result.FromValue(MessageObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Retrieve a message.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMessageAsync(string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) to which this message belongs. </param>
        /// <param name="messageId"> The ID of the message to retrieve. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="messageId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Result> GetMessageAsync(string threadId, string messageId, RequestOptions context)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));
            ClientUtilities.AssertNotNullOrEmpty(messageId, nameof(messageId));

            using var scope = ClientDiagnostics.CreateSpan("Messages.GetMessage");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetMessageRequest(threadId, messageId, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Retrieve a message.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMessage(string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) to which this message belongs. </param>
        /// <param name="messageId"> The ID of the message to retrieve. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="messageId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Result GetMessage(string threadId, string messageId, RequestOptions context)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));
            ClientUtilities.AssertNotNullOrEmpty(messageId, nameof(messageId));

            using var scope = ClientDiagnostics.CreateSpan("Messages.GetMessage");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetMessageRequest(threadId, messageId, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Modifies a message. </summary>
        /// <param name="threadId"> The ID of the thread to which this message belongs. </param>
        /// <param name="messageId"> The ID of the message to modify. </param>
        /// <param name="message"> The <see cref="ModifyMessageRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="message"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Result<MessageObject>> ModifyMessageAsync(string threadId, string messageId, ModifyMessageRequest message, CancellationToken cancellationToken = default)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));
            ClientUtilities.AssertNotNullOrEmpty(messageId, nameof(messageId));
            ClientUtilities.AssertNotNull(message, nameof(message));

            RequestOptions context = FromCancellationToken(cancellationToken);
            using RequestBody content = message.ToRequestBody();
            Result result = await ModifyMessageAsync(threadId, messageId, content, context).ConfigureAwait(false);
            return Result.FromValue(MessageObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Modifies a message. </summary>
        /// <param name="threadId"> The ID of the thread to which this message belongs. </param>
        /// <param name="messageId"> The ID of the message to modify. </param>
        /// <param name="message"> The <see cref="ModifyMessageRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="message"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Result<MessageObject> ModifyMessage(string threadId, string messageId, ModifyMessageRequest message, CancellationToken cancellationToken = default)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));
            ClientUtilities.AssertNotNullOrEmpty(messageId, nameof(messageId));
            ClientUtilities.AssertNotNull(message, nameof(message));

            RequestOptions context = FromCancellationToken(cancellationToken);
            using RequestBody content = message.ToRequestBody();
            Result result = ModifyMessage(threadId, messageId, content, context);
            return Result.FromValue(MessageObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Modifies a message.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="ModifyMessageAsync(string,string,ModifyMessageRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the thread to which this message belongs. </param>
        /// <param name="messageId"> The ID of the message to modify. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Result> ModifyMessageAsync(string threadId, string messageId, RequestBody content, RequestOptions context = null)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));
            ClientUtilities.AssertNotNullOrEmpty(messageId, nameof(messageId));
            ClientUtilities.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateSpan("Messages.ModifyMessage");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateModifyMessageRequest(threadId, messageId, content, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Modifies a message.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="ModifyMessage(string,string,ModifyMessageRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the thread to which this message belongs. </param>
        /// <param name="messageId"> The ID of the message to modify. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Result ModifyMessage(string threadId, string messageId, RequestBody content, RequestOptions context = null)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));
            ClientUtilities.AssertNotNullOrEmpty(messageId, nameof(messageId));
            ClientUtilities.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateSpan("Messages.ModifyMessage");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateModifyMessageRequest(threadId, messageId, content, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of message files. </summary>
        /// <param name="threadId"> The ID of the thread that the message and files belong to. </param>
        /// <param name="messageId"> The ID of the message that the files belongs to. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="messageId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Result<ListMessageFilesResponse>> GetMessageFilesAsync(string threadId, string messageId, int? limit = null, ListOrder? order = null, string after = null, string before = null, CancellationToken cancellationToken = default)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));
            ClientUtilities.AssertNotNullOrEmpty(messageId, nameof(messageId));

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = await GetMessageFilesAsync(threadId, messageId, limit, order?.ToString(), after, before, context).ConfigureAwait(false);
            return Result.FromValue(ListMessageFilesResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Returns a list of message files. </summary>
        /// <param name="threadId"> The ID of the thread that the message and files belong to. </param>
        /// <param name="messageId"> The ID of the message that the files belongs to. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="messageId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Result<ListMessageFilesResponse> GetMessageFiles(string threadId, string messageId, int? limit = null, ListOrder? order = null, string after = null, string before = null, CancellationToken cancellationToken = default)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));
            ClientUtilities.AssertNotNullOrEmpty(messageId, nameof(messageId));

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = GetMessageFiles(threadId, messageId, limit, order?.ToString(), after, before, context);
            return Result.FromValue(ListMessageFilesResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Returns a list of message files.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMessageFilesAsync(string,string,int?,ListOrder?,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the thread that the message and files belong to. </param>
        /// <param name="messageId"> The ID of the message that the files belongs to. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order. Allowed values: "asc" | "desc"
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="messageId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Result> GetMessageFilesAsync(string threadId, string messageId, int? limit, string order, string after, string before, RequestOptions context)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));
            ClientUtilities.AssertNotNullOrEmpty(messageId, nameof(messageId));

            using var scope = ClientDiagnostics.CreateSpan("Messages.GetMessageFiles");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetMessageFilesRequest(threadId, messageId, limit, order, after, before, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Returns a list of message files.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMessageFiles(string,string,int?,ListOrder?,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the thread that the message and files belong to. </param>
        /// <param name="messageId"> The ID of the message that the files belongs to. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order. Allowed values: "asc" | "desc"
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="messageId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Result GetMessageFiles(string threadId, string messageId, int? limit, string order, string after, string before, RequestOptions context)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));
            ClientUtilities.AssertNotNullOrEmpty(messageId, nameof(messageId));

            using var scope = ClientDiagnostics.CreateSpan("Messages.GetMessageFiles");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetMessageFilesRequest(threadId, messageId, limit, order, after, before, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves a message file. </summary>
        /// <param name="threadId"> The ID of the thread to which the message and File belong. </param>
        /// <param name="messageId"> The ID of the message the file belongs to. </param>
        /// <param name="fileId"> The ID of the file being retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="fileId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="fileId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Result<MessageFileObject>> GetMessageFileAsync(string threadId, string messageId, string fileId, CancellationToken cancellationToken = default)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));
            ClientUtilities.AssertNotNullOrEmpty(messageId, nameof(messageId));
            ClientUtilities.AssertNotNullOrEmpty(fileId, nameof(fileId));

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = await GetMessageFileAsync(threadId, messageId, fileId, context).ConfigureAwait(false);
            return Result.FromValue(MessageFileObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Retrieves a message file. </summary>
        /// <param name="threadId"> The ID of the thread to which the message and File belong. </param>
        /// <param name="messageId"> The ID of the message the file belongs to. </param>
        /// <param name="fileId"> The ID of the file being retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="fileId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="fileId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Result<MessageFileObject> GetMessageFile(string threadId, string messageId, string fileId, CancellationToken cancellationToken = default)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));
            ClientUtilities.AssertNotNullOrEmpty(messageId, nameof(messageId));
            ClientUtilities.AssertNotNullOrEmpty(fileId, nameof(fileId));

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = GetMessageFile(threadId, messageId, fileId, context);
            return Result.FromValue(MessageFileObject.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Retrieves a message file.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMessageFileAsync(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the thread to which the message and File belong. </param>
        /// <param name="messageId"> The ID of the message the file belongs to. </param>
        /// <param name="fileId"> The ID of the file being retrieved. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="fileId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="fileId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Result> GetMessageFileAsync(string threadId, string messageId, string fileId, RequestOptions context)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));
            ClientUtilities.AssertNotNullOrEmpty(messageId, nameof(messageId));
            ClientUtilities.AssertNotNullOrEmpty(fileId, nameof(fileId));

            using var scope = ClientDiagnostics.CreateSpan("Messages.GetMessageFile");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetMessageFileRequest(threadId, messageId, fileId, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Retrieves a message file.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMessageFile(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="threadId"> The ID of the thread to which the message and File belong. </param>
        /// <param name="messageId"> The ID of the message the file belongs to. </param>
        /// <param name="fileId"> The ID of the file being retrieved. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="fileId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="fileId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Result GetMessageFile(string threadId, string messageId, string fileId, RequestOptions context)
        {
            ClientUtilities.AssertNotNullOrEmpty(threadId, nameof(threadId));
            ClientUtilities.AssertNotNullOrEmpty(messageId, nameof(messageId));
            ClientUtilities.AssertNotNullOrEmpty(fileId, nameof(fileId));

            using var scope = ClientDiagnostics.CreateSpan("Messages.GetMessageFile");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetMessageFileRequest(threadId, messageId, fileId, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal PipelineMessage CreateCreateMessageRequest(string threadId, RequestBody content, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("POST");
            var uri = new RequestUri();
            uri.Reset(_endpoint);
            uri.AppendPath("/threads/", false);
            uri.AppendPath(threadId, true);
            uri.AppendPath("/messages", false);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            request.SetHeaderValue("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal PipelineMessage CreateGetMessagesRequest(string threadId, int? limit, string order, string after, string before, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("GET");
            var uri = new RequestUri();
            uri.Reset(_endpoint);
            uri.AppendPath("/threads/", false);
            uri.AppendPath(threadId, true);
            uri.AppendPath("/messages", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (order != null)
            {
                uri.AppendQuery("order", order, true);
            }
            if (after != null)
            {
                uri.AppendQuery("after", after, true);
            }
            if (before != null)
            {
                uri.AppendQuery("before", before, true);
            }
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            return message;
        }

        internal PipelineMessage CreateGetMessageRequest(string threadId, string messageId, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("GET");
            var uri = new RequestUri();
            uri.Reset(_endpoint);
            uri.AppendPath("/threads/", false);
            uri.AppendPath(threadId, true);
            uri.AppendPath("/messages/", false);
            uri.AppendPath(messageId, true);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            return message;
        }

        internal PipelineMessage CreateModifyMessageRequest(string threadId, string messageId, RequestBody content, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("POST");
            var uri = new RequestUri();
            uri.Reset(_endpoint);
            uri.AppendPath("/threads/", false);
            uri.AppendPath(threadId, true);
            uri.AppendPath("/messages/", false);
            uri.AppendPath(messageId, true);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            request.SetHeaderValue("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal PipelineMessage CreateGetMessageFilesRequest(string threadId, string messageId, int? limit, string order, string after, string before, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("GET");
            var uri = new RequestUri();
            uri.Reset(_endpoint);
            uri.AppendPath("/threads/", false);
            uri.AppendPath(threadId, true);
            uri.AppendPath("/messages/", false);
            uri.AppendPath(messageId, true);
            uri.AppendPath("/files", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (order != null)
            {
                uri.AppendQuery("order", order, true);
            }
            if (after != null)
            {
                uri.AppendQuery("after", after, true);
            }
            if (before != null)
            {
                uri.AppendQuery("before", before, true);
            }
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            return message;
        }

        internal PipelineMessage CreateGetMessageFileRequest(string threadId, string messageId, string fileId, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("GET");
            var uri = new RequestUri();
            uri.Reset(_endpoint);
            uri.AppendPath("/threads/", false);
            uri.AppendPath(threadId, true);
            uri.AppendPath("/messages/", false);
            uri.AppendPath(messageId, true);
            uri.AppendPath("/files/", false);
            uri.AppendPath(fileId, true);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            return message;
        }

        private static RequestOptions DefaultRequestContext = new RequestOptions();
        internal static RequestOptions FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestOptions() { CancellationToken = cancellationToken };
        }

        private static ResponseErrorClassifier _responseErrorClassifier200;
        private static ResponseErrorClassifier ResponseErrorClassifier200 => _responseErrorClassifier200 ??= new StatusResponseClassifier(stackalloc ushort[] { 200 });
    }
}
